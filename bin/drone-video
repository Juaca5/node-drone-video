#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');
var ms = require('ms');
var net = require('net');
var path = require('path');
var draw = require('../lib/draw');
var arDrone = require('ar-drone');
var strftime = require('strftime');
var program = require('commander');
var spawn = require('child_process').spawn;
var debug = require('debug')('drone-video');
var PaVEParser = require('ar-drone/lib/video/PaVEParser');

/**
 * Setup command-line options.
 */

program
  .version(require('../package').version)
  .option('-i, --ip [val]',
      'drone IP address or hostname to connect to (default: "192.168.1.1")',
      '192.168.1.1')
  .option('-o, --output [dir]',
      'output directory, uses "strftime" formatting (default: "drone-video-%Y%m%d-%H%M%S")',
      'drone-video-%Y%m%d-%H%M%S')
  .option('-d, --duration [ms]',
      'length of the video to record before exiting (default: Infinity)',
      ms)
  .parse(process.argv);

/**
 * Do a clean shutdown upon Ctrl+C.
 */

process.on('SIGINT', shutdown);

function shutdown () {
  if (shutdown.called) return;
  shutdown.called = true;

  console.log('\nshutting down...');

  // XXX: wtf, why doesn't node-ar-drone do this!!?!!
  clearInterval(client._interval);
  clearTimeout(client._udpNavdatasStream._timer);
  client._udpControl.close();
  client._udpNavdatasStream.destroy();

  // close the socket
  socket.destroy();

  ffplay.stdin.end();
  videoEncoder.stdin.end();

  // clean up navdata stuffs
  clearInterval(navdataInterval);
  if (navdataEncoder) {
    navdataEncoder.stdin.end();
    navdataEncoder = null;
  }

  // clear shutdown timeout
  clearTimeout(shutdownTimeout);
}

/**
 * Ensure output directory exists.
 * TODO: use node-mkdirp here...
 */

var dirname = strftime.strftimeUTC(program.output, new Date());
fs.mkdirSync(dirname);
console.log('Writing video files to %j', dirname);

/**
 * The most recent navigation data, width and height from the drone.
 * Used in the metadata video stream image generation.
 */

var navdata;
var width;
var height;

/**
 * Create client connection to the AR.Drone.
 */

var client  = arDrone.createClient({ ip: program.ip });
console.log('Connecting to drone at %j', program.ip);

/**
 * Request the "demo" navdata along with the regular navdata.
 */

client.config('general:navdata_demo', 'TRUE');

client.on('navdata', function (data) {
  // save a timestamp for us
  data.videoTimestamp = new Date();

  // keep a reference to the most recent "navdata" object
  navdata = data;

  // entries are \n-terminated
  navdataLog.write(JSON.stringify(data) + '\n');
});

/**
 * Output navdata events to the log file.
 */

var navdataLogFile = path.resolve(dirname, 'navdata.log');
var navdataLog = fs.createWriteStream(navdataLogFile);


/**
 * Connect to drone's video stream port.
 */

var port = 5555;
var socket = net.connect({ host: program.ip, port: port });

socket.on('connect', function () {
  console.error('connected to drone video');
});

socket.on('error', function (err) {
  console.error('socket "error" event:', err.stack);
  shutdown();
});

var parser = new PaVEParser();
parser.on('data', function (frame) {
  debug('PaVEParser "frame"', frame);

  // set the "width" and "height"
  width = frame.display_width;
  height = frame.display_height;

  // write to the h264 video file and the mp4 encoder
  videoH264.write(frame.payload);
  ffplay.stdin.write(frame.payload);
  videoEncoder.stdin.write(frame.payload);
});
socket.pipe(parser);

/**
 * Save the raw PaVE video stream untouched as "video.raw".
 */

var videoRaw = fs.createWriteStream(path.resolve(dirname, 'video.PaVE'));
socket.pipe(videoRaw);

/**
 * Save the parsed h264 stream as "video.h264".
 * See the `parser` "data" event.
 */

var videoH264File = path.resolve(dirname, 'video.h264');
var videoH264 = fs.createWriteStream(path.resolve(dirname, 'video.h264'));

/**
 * Spawn "ffplay" to play the h264 stream.
 */

var ffplay = spawn('ffplay', [
    '-f', 'h264',
    '-analyzeduration', '0',
    '-'
  ]
);
ffplay.on('exit', function (code, signal) {
  if (0 == code) shutdown();
});

/**
 * Encode the "video.m4v" file.
 * See the `parser` "data" event.
 *
 * See: https://gist.github.com/4403443
 */

var videoEncoderStderr = -1;
var videoEncoder = spawn('ffmpeg', [
    '-f', 'h264',
    '-analyzeduration', '0',
    '-i', '-',
    '-an',
    path.resolve(dirname, 'video.m4v')
  ],
  { stdio: [ -1, -1, videoEncoderStderr ] }
);

/**
 * Frames per second for the navdata video.
 * Default = 25, to match the ar.drone h264 video
 */

var navdataFps = 15;

/**
 * Called once the first PaVE frame has been parsed.
 */

var navdataInterval = setInterval(render, 1000 / navdataFps);
var navdataEncoder = spawn('ffmpeg', [
    '-f', 'image2pipe',
    '-analyzeduration', '0',
    '-r', navdataFps,
    '-vcodec', 'png',
    '-i', '-',
    //'-r', navdataFps,
    '-vcodec', 'qtrle',
    '-an',
    path.resolve(dirname, 'navdata.mov')
  ],
  { stdio: [ -1, -1, videoEncoderStderr ] }
);

function render () {
  if (null == navdata || null == navdata.demo || null == width || null == height) {
    debug('render: waiting for "navdata"');
    return;
  }

  debug('draw()ing navdata (%d x %d)', width, height);
  var buffer = draw(navdata, width, height, function (err, buffer) {
    if (err) throw err;
    if (!navdataEncoder) return;
    navdataEncoder.stdin.write(buffer);
  });
}

/**
 * Set a timeout to shutdown if "duration" was specified.
 */

var shutdownTimeout;
if (program.duration) {
  debug('shutting down in %d milliseconds', program.duration);
  shutdownTimeout = setTimeout(shutdown, program.duration);
}
